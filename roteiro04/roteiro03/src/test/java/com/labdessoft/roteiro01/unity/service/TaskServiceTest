import com.labdessoft.roteiro01.model.Task;
import com.labdessoft.roteiro01.service.TaskService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class TaskServiceTest {

    @Autowired
    private TaskService taskService;

    @Test
    public void testCreateTask() {
        Task task = taskService.createTask(TaskService.TaskType.DATA, TaskService.PriorityLevel.ALTA, LocalDate.now().plusDays(1), TaskService.TaskStatus.PREVISTA);
        assertNotNull(task);
        assertEquals(TaskService.TaskType.DATA, task.getType());
        assertEquals(TaskService.PriorityLevel.ALTA, task.getPriority());
        assertEquals(LocalDate.now().plusDays(1), task.getDueDate());
        assertEquals(TaskService.TaskStatus.PREVISTA, task.getStatus());
    }

    @Test
    public void testGetTaskStatus() {
        Task task = taskService.createTask(TaskService.TaskType.DATA, TaskService.PriorityLevel.ALTA, LocalDate.now().minusDays(1), TaskService.TaskStatus.PREVISTA);
        TaskService.TaskStatus status = taskService.getTaskStatus(task);
        assertEquals(TaskService.TaskStatus.ATRASADA, status);
    }

    @Test
    public void testUpdateTaskStatus() {
        Task task = taskService.createTask(TaskService.TaskType.DATA, TaskService.PriorityLevel.ALTA, LocalDate.now().plusDays(1), TaskService.TaskStatus.PREVISTA);
        taskService.updateTaskStatus(task, TaskService.TaskStatus.CONCLUIDA);
        assertEquals(TaskService.TaskStatus.CONCLUIDA, task.getStatus());
    }

    @Test
    public void testCreateTaskWithPastDueDate() {
        assertThrows(IllegalArgumentException.class, () -> {
            taskService.createTask(TaskService.TaskType.DATA, TaskService.PriorityLevel.ALTA, LocalDate.now().minusDays(1), TaskService.TaskStatus.PREVISTA);
        });
    }

    @Test
    public void testGetTaskStatusForFreeTask() {
        Task task = taskService.createTask(TaskService.TaskType.LIVRE, TaskService.PriorityLevel.ALTA, LocalDate.now().plusDays(1), TaskService.TaskStatus.PREVISTA);
        TaskService.TaskStatus status = taskService.getTaskStatus(task);
        assertEquals(TaskService.TaskStatus.PREVISTA, status);
    }
}
